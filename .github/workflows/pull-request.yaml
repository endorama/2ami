---
name: run on PR

on: [pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: gather versions
        uses: ./.github/actions/parse-asdf
        id: versions

      - name: install Go
        uses: actions/setup-go@v1
        with: 
          go-version: "${{fromJson(steps.versions.outputs.tools).golang}}"

      - name: check format
        # exit with 0 only if gofmt returns 0 lines
        run: "exit $(gofmt | wc -l)"

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.33

  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Disable EOL conversions
        run: git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v2

      - name: gather versions
        uses: ./.github/actions/parse-asdf
        id: versions

      - name: install Go
        uses: actions/setup-go@v1
        with: 
          go-version: "${{fromJson(steps.versions.outputs.tools).golang}}"

      - name: Run tests
        run: go test -v
      
      # - name: Setup tmate session
      #   if: "${{ failure() }}"
      #   uses: mxschmitt/action-tmate@v3

      # - name: Send unit tests coverage to Codecov
      #   # Since secrets aren't available on forks, we only
      #   # upload coverage on `push`. This might change if
      #   # Codecov whitelists GitHub, lifting the need
      #   # for a token.
      #   if: >
      #     matrix.operating-system != 'windows-2019' &&
      #     matrix.operating-system != 'macOS-10.14' &&
      #     github.event_name == 'push'
      #   uses: codecov/codecov-action@v1.0.2
      #   with:
      #     token: ${{secrets.CODECOV_TOKEN}}
      #     file: ./coverage_unit.txt
      #     flags: unit

  build:
    needs: [lint, tests]
    strategy:
      matrix:
        operating-system: [ubuntu-20.04, windows-2019, macOS-10.14]
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: gather versions
        uses: ./.github/actions/parse-asdf
        id: versions

      - name: install Go
        uses: actions/setup-go@v1
        with: 
          go-version: "${{fromJson(steps.versions.outputs.tools).golang}}"

      - name: Build the CLI
        run: go build --ldflags "-X main.version=${{ matrix.operating-system }}.${{ github.run_id }}.${{ github.run_number }}"

      - uses: actions/upload-artifact@v2
        with:
          name: "artifact-${{ matrix.operating-system }}.${{ github.run_id }}.${{ github.run_number }}"
          path: ./two-factor-authenticator
